facet_wrap(facets = "sex",
ncol = 2) +
# Add theme:
theme_bw()
# Print epicurve:
epicurve_strata
#| label: Cross-tab cases
copdata %>%
janitor::tabyl(case, group) %>%
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
copdata %>%
janitor::tabyl(case, sex) %>%
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
copdata <- copdata %>%
# Create age categories:
mutate(age_cat = epikit::age_categories(
# Name of age column:
x = age,
# Define the age categories:
breakers = c(0, 10, 16, 18, 20, 50, 70)
)
)
# Check age categories:
janitor::tabyl(copdata, age_cat)
# Pipe copdata:
agesex <- copdata %>%
# Filter for cases only:
filter(case == TRUE) %>%
# Create age sex pyramid:
apyramid::age_pyramid(
# Specify column containing age categories:
age_group = "age_cat",
# Specify column containing sex:
split_by = "sex",
# Don't show midpoint on the graph:
show_midpoint = FALSE
)
# Print plot:
agesex
# Create summary table:
tabsymptoms <- copdata %>%
# Select person characteristics to summarise:
select(case, diarrhoea, bloody, vomiting,
abdo, nausea, fever,headache, jointpain) %>%
# transform clinical symptoms to factors, so NA can be accounted properly in the table
dplyr::mutate(
across(.cols = c(diarrhoea, bloody, vomiting,
abdo, nausea, fever,headache, jointpain),
.fns = ~as.factor(.))) %>%
# The enxt paragraph does not work with Rversion 4.4.0
# Make NA a explicit level of factor variables
# dplyr::mutate(
#   across(.cols = c(diarrhoea, bloody, vomiting,
#          abdo, nausea, fever,headache, jointpain),
#          .fns = ~forcats::fct_na_value_to_level(.))) %>%
# Create the summary table:
gtsummary::tbl_summary(
# Stratify by case:
by = case,
# take care of missing values
missing = "no",
# Calculate row percentages:
percent = "column",
# Create nice labels:
label  = list(
diarrhoea   ~ "Diarrhoea",
bloody      ~ "Dysentary",
vomiting    ~ "Vomiting",
abdo        ~ "Abdominal pain",
nausea      ~ "Nausea",
fever       ~ "Fever",
headache    ~ "Headache",
jointpain   ~ "Joint pain")
) %>%
# Add totals:
add_overall() %>%
# Make variable names bold and italics:
bold_labels() %>%
italicize_labels() %>%
# Modify header:
modify_header(
label = "**Characteristic**",
stat_0 = "**Overall**\n **N** = {N}",
stat_1 = "**Non-case**\n **N** = {n}",
stat_2 = "**Case**\n **N** = {n}",
)
# Print the table:
tabsymptoms
# Create list of symptom variables:
symptoms <- c("diarrhoea",
"bloody",
"vomiting",
"abdo",
"nausea",
"fever",
"headache",
"jointpain")
# Create nice labels for case definition:
caselabs <- ggplot2::as_labeller(c("0" = "Non-case",
"1" = "Case"))
# Select variables and cases:
symptom_bar <- copdata %>%
# Select symptom columns:
select(case, c(all_of(symptoms))) %>%
# Drop NAs:
drop_na() %>%
# Reshape (pivot longer):
pivot_longer(!case,
names_to = "Symptoms",
values_drop_na = TRUE) %>%
# Keep only TRUE values:
filter(value == "1") %>%
# Group by symptoms and case:
group_by(Symptoms, case) %>%
# Count for each symptom by case:
dplyr::summarise(count = n()) %>%
# Create plot:
ggplot(
mapping = aes(
# Order symptom bars so most common ones are ontop:
x = reorder(Symptoms, desc(count), decreasing = TRUE),
y = count)) +
# Display bars as proportions
geom_bar(stat = "identity") +
# Update x axis label:
xlab("Symptoms") +
# Update y axis label:
ylab("Proportion of respondents") +
# Flip plot on its side so symptom labels are clear:
coord_flip() +
# Facet the plot by (labelled) case:
facet_wrap(facets = "case",
labeller = caselabs,
ncol = 2)
# Print plot:
symptom_bar
# Create table of case status:
total_ap <- tabyl(copdata, case) %>%
# Add row totals:
adorn_totals(where = "row") %>%
# Add percentages with 1 digit after the decimal point:
adorn_pct_formatting(digits = 1) %>%
# Filter to rows where case is TRUE:
filter(case == "1") %>%
# Select the column percent:
select(percent) %>%
# Extract (pull) the value from this cell:
pull()
# Print result:
total_ap
# Table to calculate attack proportions:
attack_prop <- copdata %>%
# Select columns:
select (case, class, group, sex) %>%
# Create table:
tbl_summary(
# Stratified by case
by = case,
# with row percentages
percent = "row") %>%
# Add totals:
add_overall() %>%
# Make variable names bold and italics:
bold_labels() %>%
italicize_labels() %>%
# Modify header:
modify_header(
label = "**Characteristic**",
stat_0 = "**Overall** **N** = {N}",
stat_1 = "**Non-case** **N** = {n}",
stat_2 = "**Case** **N** = {n}"
)
# Print table:
attack_prop
# Load the required libraries into the current R session:
pacman::p_load(rio,
here,
skimr,
janitor,
gtsummary,
flextable,
officer,
apyramid,
scales,
epikit,
EpiStats,
epitools,
broom,
tidyverse
)
# Import the raw data set:
copdata <- rio::import(here::here(
"data",
"backup",
"Spetses_clean2.rds"), trust = T)
# Check if age overall follows a normal distribution:
shapiro.test(copdata$age)
# Can simply have a look at
hist(copdata$age)
# Looking only at the students:
students <- copdata %>%
filter(group == "student")
hist(students$age)
# Perform Wilcoxon rank sum test on age and sex:
wilcox.test(age ~ case,
data = copdata)
copdata %>%
janitor::tabyl(sex, case)
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
copdata %>%
janitor::tabyl(case, sex) %>%
adorn_totals() %>%
adorn_percentages() %>%
adorn_pct_formatting()
# Create summary table:
tabsymptoms <- copdata %>%
# Select person characteristics to summarise:
select(case, diarrhoea, bloody, vomiting,
abdo, nausea, fever,headache, jointpain) %>%
# transform clinical symptoms to factors, so NA can be accounted properly in the table
dplyr::mutate(
across(.cols = c(diarrhoea, bloody, vomiting,
abdo, nausea, fever,headache, jointpain),
.fns = ~as.factor(.))) %>%
# The enxt paragraph does not work with Rversion 4.4.0
# Make NA a explicit level of factor variables
# dplyr::mutate(
#   across(.cols = c(diarrhoea, bloody, vomiting,
#          abdo, nausea, fever,headache, jointpain),
#          .fns = ~forcats::fct_na_value_to_level(.))) %>%
# Create the summary table:
gtsummary::tbl_summary(
# Stratify by case:
by = case,
# take care of missing values
missing = "no",
# Calculate row percentages:
percent = "column",
# Create nice labels:
label  = list(
diarrhoea   ~ "Diarrhoea",
bloody      ~ "Dysentary",
vomiting    ~ "Vomiting",
abdo        ~ "Abdominal pain",
nausea      ~ "Nausea",
fever       ~ "Fever",
headache    ~ "Headache",
jointpain   ~ "Joint pain")
) %>%
# Add totals:
add_overall() %>%
# Make variable names bold and italics:
bold_labels() %>%
italicize_labels() %>%
# Modify header:
modify_header(
label = "**Characteristic**",
stat_0 = "**Overall**\n **N** = {N}",
stat_1 = "**Non-case**\n **N** = {n}",
stat_2 = "**Case**\n **N** = {n}",
)
# Print the table:
tabsymptoms
# Create list of symptom variables:
symptoms <- c("diarrhoea",
"bloody",
"vomiting",
"abdo",
"nausea",
"fever",
"headache",
"jointpain")
# Create nice labels for case definition:
caselabs <- ggplot2::as_labeller(c("0" = "Non-case",
"1" = "Case"))
# Select variables and cases:
symptom_bar <- copdata %>%
# Select symptom columns:
select(case, c(all_of(symptoms))) %>%
# Drop NAs:
drop_na() %>%
# Reshape (pivot longer):
pivot_longer(!case,
names_to = "Symptoms",
values_drop_na = TRUE) %>%
# Keep only TRUE values:
filter(value == "1") %>%
# Group by symptoms and case:
group_by(Symptoms, case) %>%
# Count for each symptom by case:
dplyr::summarise(count = n()) %>%
# Create plot:
ggplot(
mapping = aes(
# Order symptom bars so most common ones are ontop:
x = reorder(Symptoms, desc(count), decreasing = TRUE),
y = count)) +
# Display bars as proportions
geom_bar(stat = "identity") +
# Update x axis label:
xlab("Symptoms") +
# Update y axis label:
ylab("Proportion of respondents") +
# Flip plot on its side so symptom labels are clear:
coord_flip() +
# Facet the plot by (labelled) case:
facet_wrap(facets = "case",
labeller = caselabs,
ncol = 2)
# Print plot:
symptom_bar
copdata %>% tabyl(case, pasta)
# You can save time (and probably typos!) by creating a vector for food variables...
food_vars <- c("feta", "sardines", "eggplant", "pasta",
"veal", "tomsal", "dessert", "bread",
"champagne", "beer", "redwine", "whitewine")
# ...and using EpiStats::CSTable() to run all variables together!
CSTable(copdata, "case", food_vars)
# You could use the EpiStats package for each food item
CS(copdata, "case", "feta")
CS(copdata, "case", "sardines")
CS(copdata, "case", "eggplant")
CS(copdata, "case", "pasta")
# You could use the EpiStats package for each food item
CS(copdata, "case", "feta")
CS(copdata, "case", "sardines")
CS(copdata, "case", "eggplant")
CS(copdata, "case", "pasta")
# Create table of case status:
total_ap <- tabyl(copdata, case) %>%
# Add row totals:
adorn_totals(where = "row") %>%
# Add percentages with 1 digit after the decimal point:
adorn_pct_formatting(digits = 1) %>%
# Filter to rows where case is TRUE:
filter(case == "1") %>%
# Select the column percent:
select(percent) %>%
# Extract (pull) the value from this cell:
pull()
# Print result:
total_ap
# Table to calculate attack proportions:
attack_prop <- copdata %>%
# Select columns:
select (case, class, group, sex) %>%
# Create table:
tbl_summary(
# Stratified by case
by = case,
# with row percentages
percent = "row") %>%
# Add totals:
add_overall() %>%
# Make variable names bold and italics:
bold_labels() %>%
italicize_labels() %>%
# Modify header:
modify_header(
label = "**Characteristic**",
stat_0 = "**Overall** **N** = {N}",
stat_1 = "**Non-case** **N** = {n}",
stat_2 = "**Case** **N** = {n}"
)
# Print table:
attack_prop
# Load the required libraries into the current R session:
pacman::p_load(rio,
here,
skimr,
janitor,
gtsummary,
flextable,
officer,
apyramid,
scales,
epikit,
EpiStats,
epitools,
broom,
tidyverse
)
# Import the raw data set:
copdata <- rio::import(here::here(
"data",
"backup",
"Spetses_clean2.rds"), trust = T)
# Check if age overall follows a normal distribution:
shapiro.test(copdata$age)
# Can simply have a look at
hist(copdata$age)
# Looking only at the students:
students <- copdata %>%
filter(group == "student")
hist(students$age)
# Perform Wilcoxon rank sum test on age and sex:
wilcox.test(age ~ case,
data = copdata)
copdata %>%
select(class, case) %>%
tbl_summary(by = case) %>%
add_p()
copdata %>%
select(group, case) %>%
tbl_summary(by = case) %>%
add_p()
copdata %>%
select(sex, class, group, case) %>%
tbl_summary(by = case) %>%
add_p()
# You could use the EpiStats package for each food item
CS(copdata, "case", "feta")
CS(copdata, "case", "sardines")
CS(copdata, "case", "eggplant")
CS(copdata, "case", "pasta")
rr_tbl <- CSTable(copdata, "case", food_vars) %>%
as.data.frame() %>%
rownames_to_column() %>%
flextable() %>%
set_header_labels(
values = c("Food Item",
"Total exposed",
"Cases exposed",
"AR among exposed",
"Total unexposed",
"Cases unexposed",
"AR among unexposed",
"RR",
"95% lower CI",
"95% upper CI",
"p-value"))
epitools::riskratio(copdata$pastaD,
copdata$case,
conf.level = 0.95)
# Let's get the results directly exponentiated
binom_pastaD_exp <- glm(case ~ pastaD, data = copdata,
family = binomial(link = "log")) %>%
tidy(exponentiate = TRUE,
conf.int = TRUE)
binom_pastaD_exp
epitools::riskratio(copdata$vealD,
copdata$case,
conf.level = 0.95)
# Binomial regression for RRs.
# The outcome needs to be exponentiated so we can interpret it properly!
binom_vealD <- glm(case ~ vealD, data = copdata,
family = binomial(link = "log"))
# To get exponentiated:
binom_vealD_exp <- glm(case ~ vealD, data = copdata,
family = binomial(link = "log")) %>%
tidy(exponentiate = TRUE,
conf.int = TRUE)
binom_vealD_exp
epitools::riskratio(copdata$champagneD,
copdata$case,
conf.level = 0.95)
# Let's get the results directly exponentiated
binom_champagneD_exp <- glm(case ~ champagneD, data = copdata,
family = binomial(link = "log")) %>%
tidy(exponentiate = TRUE,
conf.int = TRUE)
binom_champagneD_exp
# Load the required libraries into the current R session:
pacman::p_load(rio,
here,
skimr,
janitor,
gtsummary,
flextable,
officer,
epikit,
apyramid,
scales,
EpiStats,
tidyverse
)
# Import the raw data set:
copdata <- rio::import(here::here(
"data",
"backup",
"Spetses_clean2.rds"),
trust = TRUE)
stratall <- copdata %>%
# Mutate across to convert cases to numeric:
mutate(across(.cols = case,
.fns = ~ as.numeric(.)))
# Pass data to the csinter function:
pastastrata <- csinter(x = stratall,
cases = "case",
exposure = "veal",
by = "pasta")
pastastrata
# Perform Wilcoxon rank sum test on veal and pasta:
wilcox.test(veal ~ pasta,
data = copdata)
# Pass data to the csinter function:
champstrata <- csinter(x = stratall,
cases = "case",
exposure = "champagne",
by = "pasta")
champstrata
library(epiR)
library(epiR)
epi.2by2(table(copdata$pasta, copdata$case, copdata$veal), method = "cohort.count")
epi.2by2(table(copdata$vealD, copdata$case, copdata$pasta), method = "cohort.count")
epi.2by2(table(copdata$vealD, copdata$case, copdata$pasta), method = "cohort.count")
